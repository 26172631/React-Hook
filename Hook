React Hooks are special functions that allow you to use state and other React features in functional components. Traditionally, only class components could manage state and have access to lifecycle methods, but Hooks enable these capabilities in functional components, making them more powerful and easier to use.

useState: This Hook lets you add state to a functional component. State is a way to store information in your component that can change over time. 

import { useState } from 'react';
function Counter() {
  const [count, setCount] = useState(0);
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  );
}

useEffect: This Hook lets you perform side effects in your components, like fetching data, updating the DOM, or setting up a subscription.

import { useEffect } from 'react';
function Example() {
  useEffect(() => {
    document.title = "Component Mounted";
    return () => {
      document.title = "Component Unmounted";
    };
  }, []);
  return <div>Check the document title!</div>;
}
